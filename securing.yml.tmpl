apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: DEPLOYMENT_NAME-temp-super-user
subjects:
- kind: User
  name: GCLOUD_ACCOUNT
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: DEPLOYMENT_NAME-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: DEPLOYMENT_NAME-ssl-setup-role
rules:
- apiGroups: ["", "extensions"]
  resources: ["secrets", "deployments"]
  verbs: ["patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name:  DEPLOYMENT_NAME-ssl-setup-rb
subjects:
- kind: ServiceAccount
  name: DEPLOYMENT_NAME-sa
  apiGroup: ""
roleRef:
  kind: Role
  name: DEPLOYMENT_NAME-ssl-setup-role
  apiGroup: ""
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: DEPLOYMENT_NAME-nginx
  name: DEPLOYMENT_NAME-nginx
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: DEPLOYMENT_NAME-nginx
    spec:
      containers:
      - name: DEPLOYMENT_NAME-nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-lscrypt-config
          mountPath: /etc/nginx/conf.d
        livenessProbe:
          httpGet:
            path: /
            port: 80
      volumes:
        - name: nginx-lscrypt-config
          configMap:
            name: nginx-lscrypt-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-lscrypt-config
data:
  default.conf: |
    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }

    upstream lscrypt {
      server DEPLOYMENT_NAME-lscrypt:80 max_fails=0 fail_timeout=1s;
    }

    server {
      listen 80;
      listen [::]:80;
      server_name  _;

      location / {
        add_header Content-Type text/plain;
        return 200 "{}";
      }

      location ^~ /.well-known/acme-challenge/ {
        proxy_pass http://lscrypt;
        proxy_http_version 1.1;
        proxy_set_header upgrade $http_upgrade;
        proxy_set_header connection $connection_upgrade;

        proxy_set_header Host $http_host;
        proxy_set_header x-forwarded-host $http_host;
        proxy_set_header x-real-ip $remote_addr;
        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
        proxy_set_header x-forwarded-protocol $scheme;
        proxy_set_header x-forwarded-proto $scheme;
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: DEPLOYMENT_NAME-lscrypt-certs
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: DEPLOYMENT_NAME-lscrypt
spec:
  selector:
    app: DEPLOYMENT_NAME-lscrypt
  ports:
  - protocol: TCP
    port: 80
---
apiVersion: batch/v1
kind: Job
metadata:
  name: DEPLOYMENT_NAME-lscrypt-job
  labels:
    app: DEPLOYMENT_NAME-lscrypt
spec:
  template:
    metadata:
      name: DEPLOYMENT_NAME-lscrypt
      labels:
        app: DEPLOYMENT_NAME-lscrypt
    spec:
      serviceAccountName: DEPLOYMENT_NAME-sa
      containers:
      - image: epic/kube-nginx-letsencrypt:0.1
        name: DEPLOYMENT_NAME-lscrypt
        imagePullPolicy: Always
        ports:
        - name: DEPLOYMENT_NAME-lscrypt
          containerPort: 80
        env:
        - name: DOMAINS
          value: DOMAINS_VALUE
        - name: EMAIL
          value: DOMAIN_EMAIL
        - name: SECRET
          value: DEPLOYMENT_NAME-lscrypt-certs
        - name: STAGING
          value: "STAGING_MODE"
        - name: DEPLOYMENT
          value: DEPLOYMENT_NAME-lscrypt
      restartPolicy: Never
