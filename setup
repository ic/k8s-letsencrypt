#!/usr/bin/env bash

which -s gcloud
if [[ $? != 0 ]]; then
  echo 'Setup requires `gcloud` available on the shell PATH.'
  exit 128
fi
which -s kubectl
if [[ $? != 0 ]]; then
  echo 'Setup requires `kubectl` available on the shell PATH.'
  exit 127
fi


GCLOUD_PROJECT=$1
GCLOUD_ACCOUNT=$2
DEPLOYMENT_NAME=$3
DOMAIN=$4
DOMAIN_EMAIL=$5
NODE_TO_SECURE=$6
PORT_SECURED_NODE=$7
PRODUCTION_MODE=$8

if [[ -z $GCLOUD_PROJECT ]]; then
  echo "Please specify a Gcloud project name as arg 1."
  exit 1
fi

if [[ -z $GCLOUD_ACCOUNT ]]; then
  echo "Please specify a Gcloud account name as arg 2."
  exit 2
fi

if [[ -z $DEPLOYMENT_NAME ]]; then
  echo "Please specify a deployment name as arg 3."
  exit 3
fi

if [[ -z $DOMAIN ]]; then
  echo "Please specify a domain name as arg 4."
  exit 4
fi

if [[ -z $DOMAIN_EMAIL ]]; then
  echo "Please specify a domain name registered email address as arg 5."
  exit 5
fi

if [[ -z $NODE_TO_SECURE ]]; then
  echo "Please specify the name of the node to secure inside the cluster as arg 6."
  exit 6
fi

if [[ -z $PORT_SECURED_NODE ]]; then
  echo "Please specify the port of the backend node to secure (currently port it is listening) as arg 7."
  exit 7
fi

if [[ -z $PRODUCTION_MODE ]]; then
  STAGING_MODE="true"
else
  STAGING_MODE=""
fi


wdir=/tmp/$DEPLOYMENT_NAME
mkdir -p $wdir
cat init.yml.tmpl | \
  sed s/DEPLOYMENT_NAME/$DEPLOYMENT_NAME/g | \
  sed s/DOMAIN_EMAIL/$DOMAIN_EMAIL/g | \
  sed s/DOMAINS_VALUE/$DOMAIN/g \
  > $wdir/init.yml
cat securing.yml.tmpl | \
  sed s/DEPLOYMENT_NAME/$DEPLOYMENT_NAME/g | \
  sed s/DOMAIN_EMAIL/$DOMAIN_EMAIL/g | \
  sed s/DOMAINS_VALUE/$DOMAIN/g | \
  sed s/STAGING_MODE/$STAGING_MODE/g | \
  sed s/GCLOUD_ACCOUNT/$GCLOUD_ACCOUNT/g | \
  sed s/NODE_TO_SECURE/$NODE_TO_SECURE/g | \
  sed s/PORT_SECURED_NODE/$PORT_SECURED_NODE/g \
  > $wdir/securing.yml
cat secured.yml.tmpl | \
  sed s/DEPLOYMENT_NAME/$DEPLOYMENT_NAME/g | \
  sed s/DOMAIN_EMAIL/$DOMAIN_EMAIL/g | \
  sed s/DOMAINS_VALUE/$DOMAIN/g \
  > $wdir/secured.yml
cat cleanup.yml.tmpl | \
  sed s/DEPLOYMENT_NAME/$DEPLOYMENT_NAME/g | \
  sed s/DOMAIN_EMAIL/$DOMAIN_EMAIL/g | \
  sed s/DOMAINS_VALUE/$DOMAIN/g | \
  sed s/STAGING_MODE/$STAGING_MODE/g | \
  sed s/GCLOUD_ACCOUNT/$GCLOUD_ACCOUNT/g \
  > $wdir/cleanup.yml
cat delete.yml.tmpl | \
  sed s/DEPLOYMENT_NAME/$DEPLOYMENT_NAME/g | \
  sed s/DOMAIN_EMAIL/$DOMAIN_EMAIL/g | \
  sed s/DOMAINS_VALUE/$DOMAIN/g \
  > $wdir/delete_$DEPLOYMENT_NAME.yml


function guard_cmd {
  set -e
  $1
  set +e
}

#
# Login to the Glcoud environment
#
guard_cmd "gcloud auth login $GCLOUD_ACCOUNT --quiet --brief --activate --project $GCLOUD_PROJECT"

#
# Build the basic infrastructure.
#
guard_cmd "kubectl apply -f $wdir/init.yml"

#
# Wait for the basic infrastructure to be online.
#
#   * Wait for an ingress IP address.
#   * Wait for the domain name to answer on that IP address.
#
ip_address=
# attempt_get_ip requests cluster data and extracts the IP address field.
#   The field is empty until an address is available.
#   The function sets `ip_address` to the address when available,
#   otherwise an empty value.
function attempt_get_ip {
  ip_address=`kubectl get ingress -o=jsonpath='{.status.loadBalancer.ingress[*].ip}' $DEPLOYMENT_NAME-ingress`
}
echo -n "Waiting for IP address"
while [ -z $ip_address ]
do
  echo -n "."
  attempt_get_ip
  sleep 1
done
echo

domain_test=42
# test_domain attempts a direct connection to the target domain name.
#   Output from connection attempts are discarded. The function sets
#   `domain_test` to 0 when the domain returns 200, and a non-zero
#   value on any other status code.
function test_domain {
  curl --silent --fail $DOMAIN
  domain_test=$?
}
echo "Waiting for $DOMAIN availability:"
echo -e "\t* Automatic: The cluster endpoint is preparing (Ingress)."
echo -e "\t* Manual: Please ensure '$DOMAIN' is registered as an A record to '$ip_address' on your DNS."
echo -e -n "\t"
while [ $domain_test != 0 ]
do
  echo -n "."
  test_domain
  sleep 1
done
echo

guard_cmd "kubectl apply -f $wdir/securing.yml"
guard_cmd "kubectl apply -f $wdir/secured.yml"
guard_cmd "kubectl delete -f $wdir/cleanup.yml"

echo Setup complete:
echo -e "\tCluster IP address (ingress): $ip_address"
echo -e "\tCluster DNS: $DOMAIN"
echo -e "\tDeletion command: kubectl delete -f $wdir/delete_$DEPLOYMENT_NAME.yml"
echo -e "\tWarning: Please save the deletion script if you want to use it later ($wdir may get erased)."
